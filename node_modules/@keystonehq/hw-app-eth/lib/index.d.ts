import { TransportWebUSB, type TransportConfig } from '@keystonehq/hw-transport-webusb';
import { CryptoAccount, CryptoHDKey } from '@keystonehq/bc-ur-registry-eth';
import { CheckLockStatus, CheckDeviceVersion } from './request';
import { ExportPubKeyParams } from './types';
export { HDPathType } from './path-type';
export * from './request';
import Eth from './new';
export { Eth };
export default class EthLegacy {
    #private;
    private transport;
    constructor(transport: TransportWebUSB);
    static createWithUSBTransport(config?: TransportConfig): Promise<EthLegacy>;
    checkLockStatus: CheckLockStatus;
    signTransaction: (keyringInstance: any, address: string, tx: any) => Promise<any>;
    signTransactionFromUr(urString: string): Promise<import("./request").Response<string>>;
    exportPubKeyFromUr: (params: ExportPubKeyParams, serializer?: (params: ExportPubKeyParams) => any) => Promise<CryptoHDKey | CryptoAccount>;
    CheckDeviceVersion: CheckDeviceVersion;
}
//# sourceMappingURL=index.d.ts.map