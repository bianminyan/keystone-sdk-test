"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.close = exports.request = exports.gracefullyResetDevice = exports.isSupported = exports.getFirstKeystoneDevice = exports.getKeystoneDevices = exports.open = exports.requestKeystoneDevice = exports.initializeDisconnectListener = exports.keystoneUSBVendorId = void 0;
const constants_1 = require("./constants");
const helper_1 = require("./helper");
const hw_transport_error_1 = require("@keystonehq/hw-transport-error");
exports.keystoneUSBVendorId = 4617;
const keystoneDevices = [
    {
        vendorId: exports.keystoneUSBVendorId,
    },
];
const initializeDisconnectListener = (device, disconnectListener) => {
    const onDisconnect = (e) => {
        if (device === e.device) {
            disconnectListener && disconnectListener(device);
            (0, exports.close)(device);
            navigator.usb.removeEventListener('disconnect', onDisconnect);
        }
    };
    navigator.usb.addEventListener('disconnect', onDisconnect);
};
exports.initializeDisconnectListener = initializeDisconnectListener;
function selectDefaultConfiguration(device) {
    return __awaiter(this, void 0, void 0, function* () {
        if (device.configuration === null) {
            yield device.selectConfiguration(constants_1.USBConfigurationValue);
        }
    });
}
function requestKeystoneDevice() {
    return __awaiter(this, void 0, void 0, function* () {
        const device = yield navigator.usb.requestDevice({
            filters: keystoneDevices,
        });
        return device;
    });
}
exports.requestKeystoneDevice = requestKeystoneDevice;
const open = (device) => __awaiter(void 0, void 0, void 0, function* () {
    yield device.open();
    yield selectDefaultConfiguration(device);
    yield gracefullyResetDevice(device);
    try {
        yield device.claimInterface(constants_1.USBInterfaceNumber);
    }
    catch (e) {
        yield (0, exports.close)(device);
        throw e;
    }
    return device;
});
exports.open = open;
function getKeystoneDevices() {
    return __awaiter(this, void 0, void 0, function* () {
        const devices = yield navigator.usb.getDevices();
        return devices.filter((d) => d.vendorId === exports.keystoneUSBVendorId);
    });
}
exports.getKeystoneDevices = getKeystoneDevices;
function getFirstKeystoneDevice() {
    return __awaiter(this, void 0, void 0, function* () {
        const existingDevices = yield getKeystoneDevices();
        if (existingDevices.length > 0)
            return existingDevices[0];
        return requestKeystoneDevice();
    });
}
exports.getFirstKeystoneDevice = getFirstKeystoneDevice;
const isSupported = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.usb) || typeof navigator.usb.getDevices !== 'function')
        (0, hw_transport_error_1.throwTransportError)(hw_transport_error_1.Status.ERR_NOT_SUPPORTED);
    if ((0, helper_1.isEmpty)(yield getKeystoneDevices()))
        (0, hw_transport_error_1.throwTransportError)(hw_transport_error_1.Status.ERR_DEVICE_NOT_FOUND);
    return true;
});
exports.isSupported = isSupported;
function gracefullyResetDevice(device) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield device.reset();
        }
        catch (err) {
            console.warn(err);
        }
    });
}
exports.gracefullyResetDevice = gracefullyResetDevice;
const request = () => __awaiter(void 0, void 0, void 0, function* () {
    const device = yield requestKeystoneDevice();
    return yield (0, exports.open)(device);
});
exports.request = request;
const close = (device) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.log('Closing device');
        yield device.releaseInterface(constants_1.USBInterfaceNumber);
        yield gracefullyResetDevice(device);
        yield device.close();
        console.log('Closing device done');
    }
    catch (err) {
        console.log('in closh func');
        console.warn(err);
    }
});
exports.close = close;
//# sourceMappingURL=webusb.js.map