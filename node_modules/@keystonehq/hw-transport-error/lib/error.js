"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwTransportError = exports.ErrorInfo = exports.TransportError = void 0;
const status_code_1 = require("./status-code");
class TransportError extends Error {
    constructor(message, transportErrorCode, details) {
        super(`${message} (error_code: ${transportErrorCode})`);
        this.name = 'TransportError';
        this.transportErrorCode = transportErrorCode;
        this.details = details !== null && details !== void 0 ? details : '';
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.TransportError = TransportError;
exports.ErrorInfo = {
    [status_code_1.Status.ERR_DEVICE_NOT_OPENED]: 'The USB device cannot be connected.',
    [status_code_1.Status.ERR_DEVICE_NOT_FOUND]: 'The USB device cannot be found.',
    [status_code_1.Status.ERR_RESPONSE_STATUS_NOT_OK]: 'The response status is not ok.',
    [status_code_1.Status.ERR_TIMEOUT]: 'The request timed out.',
    [status_code_1.Status.ERR_DATA_TOO_LARGE]: 'The data is too large.',
    [status_code_1.Status.ERR_NOT_SUPPORTED]: 'The USB device is not supported.',
    [status_code_1.Status.ERR_BUFFER_MISMATCH]: 'The buffer mismatched.',
    [status_code_1.Status.ERR_RECEIVED_BABBLE]: 'The USB device received babble.',
    [status_code_1.Status.ERR_INVALID_PACKET_SIZE]: 'The packet size is invalid.',
    [status_code_1.Status.ERR_TRANSPORT_HAS_NOT_BEEN_SET]: 'The transport has not been set.',
    [status_code_1.Status.ERR_UR_INCOMPLETE]: 'The UR is incomplete.',
    [status_code_1.Status.ERR_UR_INVALID_TYPE]: 'The UR type is invalid.',
};
const throwTransportError = (status) => {
    var _a;
    const message = (_a = exports.ErrorInfo[status]) !== null && _a !== void 0 ? _a : 'Unknown error';
    throw new TransportError(message, status);
};
exports.throwTransportError = throwTransportError;
//# sourceMappingURL=error.js.map